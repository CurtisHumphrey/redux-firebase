(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{bGFw:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return p}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),i=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/action_switch.md"}});var s={_frontmatter:o},c=i.a;function p(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(c,r({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"switch"},"Switch"),Object(a.b)("h2",{id:"usage"},"Usage"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-js"}),"import {firebase_actions, ExtraValue} from 'redux-firebase'\n\n// a_promise is a Promise that returns once the first data is loaded after the switch\nconst a_promise = dispatch(firebase_actions.switch(\n  {\n    // meta\n  },\n))\n\n// this is equalivate to but as just one redux action:\nimport {firebase_actions, ExtraValue} from 'redux-firebase'\n\n// the orginal subscription\nconst meta = {\n  path: 'something',\n  update_action: 'set_something',\n  initial_value: 'great',\n}\nfirebase_actions.on(meta)\n\n// Now the switch\nconst a_promise = dispatch(firebase_actions.off(meta))\na_promise.then(() => {\n  return dispatch(firebase_actions.on({\n    ...meta,\n    old_path: meta.path,\n    path: 'something/new',\n  }))\n})\n.then(() => /* new location data loaded */)\n")),Object(a.b)("h2",{id:"generated-action"},"Generated Action"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-JSON"}),'{\n  "$schema": "http://json-schema.org/draft-04/schema#",\n  "properties": {\n    "type": {\n      "type": "enum",\n      "enum": ["firebase/switch"]\n    },\n    "meta": {\n      "properties": {\n        "path": {\n          "description": "firebase new path to attach the on",\n          "type": "string"\n        },\n        "old_path": {\n          "description": "Firebase path that current on is attached. If none provided this becomes just an on.",\n          "type": "string"\n        },\n        "update_action": {\n          "description":\n            "The name of the redux action to generate when firebase returns the value. If none is provided no action is sent",\n          "type": "string"\n        },\n        "init_value": {\n          "description": "if this path is null (i.e., missing) this object will be saved there and returned, if omited it will use the original value provided in the firebase/on",\n          "type": "object"\n        }\n      },\n      "type": "object",\n      "required": ["path"]\n    }\n  },\n  "type": "object",\n  "required": ["type", "meta"]\n}\n')))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/action_switch.md"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-action-switch-md-9733be1a6532b102dad8.js.map